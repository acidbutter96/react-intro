{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/marcos/Documents/Celke/estudoNodejs/react-intro/src/Clock.js\";\nimport React from \"react\";\n\nclass Clock extends React.Component {\n  constructor(props) {\n    //super() is the constructor of the father class, it referes about the heritage of the class Clock in relation to the object ReactComponent\n    //we cannot call the constructor before we call the father constructor, this is why we have to call the super method.\n    //so then we can work with states, an method of ReactComponent class.\n    super(props);\n    this.state = {\n      date: new Date()\n    };\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), 1000); //this do the same as the setState of flutter :)\n    //the big deal about learning two frontend languages and one backend language makes me feel like a really fullstack developer lol, can't wait to add the tensorflow instancies in my projects lmao\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID); //with this we can stop//destroy the states declared in the DidMount, sounds like: setState -> unsetState === DidMount -> WillUnmount :)\n  } //the function above is good to set timers, etc\n\n\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: 'violet'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Look that, that's amizing wow, we can use OO to create classes and then renderize html objects, awesome!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Therefore we have a lot of funcionalities to explore**\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Here we can print any state defined beacause of the super() \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"method\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 85\n          }, this), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this), \"Using the date state we can see\", /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"the date:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: /*#__PURE__*/_jsxDEV(\"li\", {\n                children: this.state.date.toDateString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"the time:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: /*#__PURE__*/_jsxDEV(\"li\", {\n                children: this.state.date.toLocaleTimeString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"etc\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"The componentDidMount() runs every time the component is rendered on DOM. We can configure, for example, a timer used to make the state auto update from time to time.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default Clock;","map":{"version":3,"sources":["/home/marcos/Documents/Celke/estudoNodejs/react-intro/src/Clock.js"],"names":["React","Clock","Component","constructor","props","state","date","Date","componentDidMount","timerID","setInterval","tick","componentWillUnmount","clearInterval","setState","render","color","toDateString","toLocaleTimeString"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,KAAN,SAAoBD,KAAK,CAACE,SAA1B,CAAmC;AAE/BC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAEd;AACA;AACA;AACA,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,IAAIC,IAAJ;AADG,KAAb;AAIH;;AAEDC,EAAAA,iBAAiB,GAAE;AACf,SAAKC,OAAL,GAAeC,WAAW,CACtB,MAAI,KAAKC,IAAL,EADkB,EAEtB,IAFsB,CAA1B,CADe,CAMf;AACA;AACH;;AAEDC,EAAAA,oBAAoB,GAAE;AAClBC,IAAAA,aAAa,CAAC,KAAKJ,OAAN,CAAb,CADkB,CAElB;AACH,GA3B8B,CA6B/B;;;AAEAE,EAAAA,IAAI,GAAE;AACE,SAAKG,QAAL,CAAc;AACVR,MAAAA,IAAI,EAAE,IAAIC,IAAJ;AADI,KAAd;AAGP;;AAEDQ,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAA,8BACI;AAAK,QAAA,KAAK,EAAE;AAACC,UAAAA,KAAK,EAAC;AAAP,SAAZ;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAOI;AAAA,gCACI;AAAA,kGACgE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADhE;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,kDAKI;AAAA,kCACI;AAAA,iDAEI;AAAA,qCACI;AAAA,0BAAK,KAAKX,KAAL,CAAWC,IAAX,CAAgBW,YAAhB;AAAL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAOI;AAAA,iDAEI;AAAA,qCACI;AAAA,0BACK,KAAKZ,KAAL,CAAWC,IAAX,CAAgBY,kBAAhB;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPJ,eAeI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAfJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ,eAgCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAhCJ;AAAA,oBADJ;AAuCH;;AA7E8B;;AAgFnC,eAAejB,KAAf","sourcesContent":["import React from \"react\";\n\nclass Clock extends React.Component{\n\n    constructor(props){\n\n        //super() is the constructor of the father class, it referes about the heritage of the class Clock in relation to the object ReactComponent\n        //we cannot call the constructor before we call the father constructor, this is why we have to call the super method.\n        //so then we can work with states, an method of ReactComponent class.\n        super(props);\n        this.state = {\n            date: new Date()\n        }\n\n    }\n\n    componentDidMount(){\n        this.timerID = setInterval(\n            ()=>this.tick(),\n            1000\n        );\n\n        //this do the same as the setState of flutter :)\n        //the big deal about learning two frontend languages and one backend language makes me feel like a really fullstack developer lol, can't wait to add the tensorflow instancies in my projects lmao\n    }\n\n    componentWillUnmount(){\n        clearInterval(this.timerID);\n        //with this we can stop//destroy the states declared in the DidMount, sounds like: setState -> unsetState === DidMount -> WillUnmount :)\n    }\n\n    //the function above is good to set timers, etc\n\n    tick(){\n            this.setState({\n                date: new Date()\n            });\n    }\n\n    render(){\n        return(\n            <>\n                <div style={{color:'violet'}}>\n                    <hr/>\n                    <h1>Look that, that's amizing wow, we can use OO to create classes and then renderize html objects, awesome!</h1>\n                    <h2>Therefore we have a lot of funcionalities to explore**</h2>\n                    <hr/>\n                </div>\n                <div>\n                    <h2>\n                        Here we can print any state defined beacause of the super() <strong>method</strong>:\n                    </h2>\n                    Using the date state we can see\n                    <ul>\n                        <li>\n                             the date:\n                            <ul>\n                                <li>{this.state.date.toDateString()}</li>\n                            </ul>\n                        </li>\n                        <li>\n                            the time:\n                            <ul>\n                                <li>\n                                    {this.state.date.toLocaleTimeString()}\n                                </li>\n                            </ul>\n                        </li>\n                        <li>\n                            etc\n                        </li>\n                    </ul>\n                </div>\n                <div>\n                    The componentDidMount() runs every time the component is rendered on DOM. We can configure, for example, a timer used to make the state auto update from time to time.\n                </div>\n\n            </>\n        );\n    }\n}\n\nexport default Clock;"]},"metadata":{},"sourceType":"module"}